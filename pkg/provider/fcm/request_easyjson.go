// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fcm

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm(in *jlexer.Lexer, out *WebpushFcmOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm(out *jwriter.Writer, in WebpushFcmOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Link != "" {
		const prefix string = ",\"link\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebpushFcmOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebpushFcmOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebpushFcmOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebpushFcmOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm1(in *jlexer.Lexer, out *WebpushConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(map[string]string)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Headers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]string)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Data)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Notification = make(map[string]interface{})
				} else {
					out.Notification = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Notification)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "fcm_options":
			if in.IsNull() {
				in.Skip()
				out.FcmOptions = nil
			} else {
				if out.FcmOptions == nil {
					out.FcmOptions = new(WebpushFcmOptions)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FcmOptions).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm1(out *jwriter.Writer, in WebpushConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Headers {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Data {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Notification) != 0 {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Notification {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if m, ok := v6Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.FcmOptions != nil {
		const prefix string = ",\"fcm_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FcmOptions).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebpushConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebpushConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebpushConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebpushConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm1(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm2(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm2(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm2(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm3(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]string)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Data)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(Notification)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Notification).UnmarshalJSON(data))
				}
			}
		case "android":
			if in.IsNull() {
				in.Skip()
				out.Android = nil
			} else {
				if out.Android == nil {
					out.Android = new(AndroidConfig)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Android).UnmarshalJSON(data))
				}
			}
		case "webpush":
			if in.IsNull() {
				in.Skip()
				out.Webpush = nil
			} else {
				if out.Webpush == nil {
					out.Webpush = new(WebpushConfig)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Webpush).UnmarshalJSON(data))
				}
			}
		case "apns":
			if in.IsNull() {
				in.Skip()
				out.Apns = nil
			} else {
				if out.Apns == nil {
					out.Apns = new(ApnsConfig)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Apns).UnmarshalJSON(data))
				}
			}
		case "fcm_options":
			if in.IsNull() {
				in.Skip()
				out.FcmOptions = nil
			} else {
				if out.FcmOptions == nil {
					out.FcmOptions = new(FcmOptions)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FcmOptions).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm3(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.Condition != "" {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Condition))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Data {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	if in.Notification != nil {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Notification).MarshalJSON())
	}
	if in.Android != nil {
		const prefix string = ",\"android\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Android).MarshalJSON())
	}
	if in.Webpush != nil {
		const prefix string = ",\"webpush\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Webpush).MarshalJSON())
	}
	if in.Apns != nil {
		const prefix string = ",\"apns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Apns).MarshalJSON())
	}
	if in.FcmOptions != nil {
		const prefix string = ",\"fcm_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FcmOptions).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm3(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm4(in *jlexer.Lexer, out *FcmOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "analytics_label":
			out.AnalyticsLabel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm4(out *jwriter.Writer, in FcmOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AnalyticsLabel != "" {
		const prefix string = ",\"analytics_label\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AnalyticsLabel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FcmOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FcmOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FcmOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FcmOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm4(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm5(in *jlexer.Lexer, out *ApnsFcmOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "analytics_label":
			out.AnalyticsLabel = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm5(out *jwriter.Writer, in ApnsFcmOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AnalyticsLabel != "" {
		const prefix string = ",\"analytics_label\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AnalyticsLabel))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApnsFcmOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApnsFcmOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApnsFcmOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApnsFcmOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm5(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm6(in *jlexer.Lexer, out *ApnsConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(map[string]string)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Headers)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Payload = make(map[string]interface{})
				} else {
					out.Payload = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					(out.Payload)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "fcm_options":
			if in.IsNull() {
				in.Skip()
				out.FcmOptions = nil
			} else {
				if out.FcmOptions == nil {
					out.FcmOptions = new(ApnsFcmOptions)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FcmOptions).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm6(out *jwriter.Writer, in ApnsConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Headers {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Payload {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if m, ok := v12Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.FcmOptions != nil {
		const prefix string = ",\"fcm_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FcmOptions).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApnsConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApnsConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApnsConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApnsConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm6(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm7(in *jlexer.Lexer, out *AndroidNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "sound":
			out.Sound = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "click_action":
			out.ClickAction = string(in.String())
		case "body_loc_key":
			out.BodyLocKey = string(in.String())
		case "body_loc_args":
			if in.IsNull() {
				in.Skip()
				out.BodyLocArgs = nil
			} else {
				in.Delim('[')
				if out.BodyLocArgs == nil {
					if !in.IsDelim(']') {
						out.BodyLocArgs = make([]string, 0, 4)
					} else {
						out.BodyLocArgs = []string{}
					}
				} else {
					out.BodyLocArgs = (out.BodyLocArgs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.BodyLocArgs = append(out.BodyLocArgs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title_loc_key":
			out.TitleLocKey = string(in.String())
		case "title_loc_args":
			if in.IsNull() {
				in.Skip()
				out.TitleLocArgs = nil
			} else {
				in.Delim('[')
				if out.TitleLocArgs == nil {
					if !in.IsDelim(']') {
						out.TitleLocArgs = make([]string, 0, 4)
					} else {
						out.TitleLocArgs = []string{}
					}
				} else {
					out.TitleLocArgs = (out.TitleLocArgs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.TitleLocArgs = append(out.TitleLocArgs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_id":
			out.ChannelID = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm7(out *jwriter.Writer, in AndroidNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if in.Color != "" {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	if in.Sound != "" {
		const prefix string = ",\"sound\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sound))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.ClickAction != "" {
		const prefix string = ",\"click_action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClickAction))
	}
	if in.BodyLocKey != "" {
		const prefix string = ",\"body_loc_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BodyLocKey))
	}
	if len(in.BodyLocArgs) != 0 {
		const prefix string = ",\"body_loc_args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.BodyLocArgs {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.TitleLocKey != "" {
		const prefix string = ",\"title_loc_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleLocKey))
	}
	if len(in.TitleLocArgs) != 0 {
		const prefix string = ",\"title_loc_args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.TitleLocArgs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.ChannelID != "" {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelID))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AndroidNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AndroidNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AndroidNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AndroidNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm7(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm8(in *jlexer.Lexer, out *AndroidFcmOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "analytics_label":
			out.AnalyticsLabel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm8(out *jwriter.Writer, in AndroidFcmOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"analytics_label\":"
		out.RawString(prefix[1:])
		out.String(string(in.AnalyticsLabel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AndroidFcmOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AndroidFcmOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AndroidFcmOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AndroidFcmOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm8(l, v)
}
func easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm9(in *jlexer.Lexer, out *AndroidConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collapse_key":
			out.CollapseKey = string(in.String())
		case "priority":
			out.Priority = AndroidMessagePriority(in.String())
		case "ttl":
			out.TTL = string(in.String())
		case "restricted_package_name":
			out.RestrictedPackageName = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]string)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Data)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Notification":
			if in.IsNull() {
				in.Skip()
				out.Notification = nil
			} else {
				if out.Notification == nil {
					out.Notification = new(AndroidNotification)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Notification).UnmarshalJSON(data))
				}
			}
		case "fcm_options":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FcmOptions).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm9(out *jwriter.Writer, in AndroidConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CollapseKey != "" {
		const prefix string = ",\"collapse_key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CollapseKey))
	}
	if in.Priority != "" {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Priority))
	}
	if in.TTL != "" {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TTL))
	}
	if in.RestrictedPackageName != "" {
		const prefix string = ",\"restricted_package_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RestrictedPackageName))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Data {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	if in.Notification != nil {
		const prefix string = ",\"Notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Notification).MarshalJSON())
	}
	if true {
		const prefix string = ",\"fcm_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FcmOptions).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AndroidConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AndroidConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComDialogsDialogPushServicePkgProviderFcm9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AndroidConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AndroidConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComDialogsDialogPushServicePkgProviderFcm9(l, v)
}
