// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push_service.proto

package api

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeerType int32

const (
	Private PeerType = 0
	Group   PeerType = 1
	SIP     PeerType = 2
)

var PeerType_name = map[int32]string{
	0: "Private",
	1: "Group",
	2: "SIP",
}

var PeerType_value = map[string]int32{
	"Private": 0,
	"Group":   1,
	"SIP":     2,
}

func (PeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{0}
}

type SilentPush struct {
}

func (m *SilentPush) Reset()      { *m = SilentPush{} }
func (*SilentPush) ProtoMessage() {}
func (*SilentPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{0}
}
func (m *SilentPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SilentPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SilentPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SilentPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SilentPush.Merge(m, src)
}
func (m *SilentPush) XXX_Size() int {
	return m.Size()
}
func (m *SilentPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SilentPush.DiscardUnknown(m)
}

var xxx_messageInfo_SilentPush proto.InternalMessageInfo

type Localizeable struct {
	LocKey  string   `protobuf:"bytes,1,opt,name=loc_key,json=locKey,proto3" json:"loc_key,omitempty"`
	LocArgs []string `protobuf:"bytes,2,rep,name=loc_args,json=locArgs,proto3" json:"loc_args,omitempty"`
}

func (m *Localizeable) Reset()      { *m = Localizeable{} }
func (*Localizeable) ProtoMessage() {}
func (*Localizeable) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{1}
}
func (m *Localizeable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Localizeable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Localizeable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Localizeable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Localizeable.Merge(m, src)
}
func (m *Localizeable) XXX_Size() int {
	return m.Size()
}
func (m *Localizeable) XXX_DiscardUnknown() {
	xxx_messageInfo_Localizeable.DiscardUnknown(m)
}

var xxx_messageInfo_Localizeable proto.InternalMessageInfo

func (m *Localizeable) GetLocKey() string {
	if m != nil {
		return m.LocKey
	}
	return ""
}

func (m *Localizeable) GetLocArgs() []string {
	if m != nil {
		return m.LocArgs
	}
	return nil
}

type Peer struct {
	Type  PeerType `protobuf:"varint,1,opt,name=type,proto3,enum=main.PeerType" json:"type,omitempty"`
	Id    int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StrId string   `protobuf:"bytes,3,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *Peer) Reset()      { *m = Peer{} }
func (*Peer) ProtoMessage() {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{2}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return Private
}

func (m *Peer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetStrId() string {
	if m != nil {
		return m.StrId
	}
	return ""
}

type OutPeer struct {
	Type       PeerType `protobuf:"varint,1,opt,name=type,proto3,enum=main.PeerType" json:"type,omitempty"`
	Id         int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64    `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	StrId      string   `protobuf:"bytes,4,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *OutPeer) Reset()      { *m = OutPeer{} }
func (*OutPeer) ProtoMessage() {}
func (*OutPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{3}
}
func (m *OutPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutPeer.Merge(m, src)
}
func (m *OutPeer) XXX_Size() int {
	return m.Size()
}
func (m *OutPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_OutPeer.DiscardUnknown(m)
}

var xxx_messageInfo_OutPeer proto.InternalMessageInfo

func (m *OutPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return Private
}

func (m *OutPeer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *OutPeer) GetStrId() string {
	if m != nil {
		return m.StrId
	}
	return ""
}

// Call merge rule
type MergeCallModel struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Merge bool   `protobuf:"varint,2,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (m *MergeCallModel) Reset()      { *m = MergeCallModel{} }
func (*MergeCallModel) ProtoMessage() {}
func (*MergeCallModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{4}
}
func (m *MergeCallModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeCallModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergeCallModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MergeCallModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeCallModel.Merge(m, src)
}
func (m *MergeCallModel) XXX_Size() int {
	return m.Size()
}
func (m *MergeCallModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeCallModel.DiscardUnknown(m)
}

var xxx_messageInfo_MergeCallModel proto.InternalMessageInfo

func (m *MergeCallModel) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MergeCallModel) GetMerge() bool {
	if m != nil {
		return m.Merge
	}
	return false
}

type AlertingPush struct {
	// Types that are valid to be assigned to AlertBody:
	//	*AlertingPush_LocAlertBody
	//	*AlertingPush_SimpleAlertBody
	AlertBody isAlertingPush_AlertBody `protobuf_oneof:"alert_body"`
	// Types that are valid to be assigned to AlertTitle:
	//	*AlertingPush_LocAlertTitle
	//	*AlertingPush_SimpleAlertTitle
	AlertTitle isAlertingPush_AlertTitle `protobuf_oneof:"alert_title"`
	Badge      int32                     `protobuf:"varint,6,opt,name=badge,proto3" json:"badge,omitempty"`
	Peer       *Peer                     `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid        *types.StringValue        `protobuf:"bytes,8,opt,name=mid,proto3" json:"mid,omitempty"`
	Category   *types.StringValue        `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
}

func (m *AlertingPush) Reset()      { *m = AlertingPush{} }
func (*AlertingPush) ProtoMessage() {}
func (*AlertingPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{5}
}
func (m *AlertingPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertingPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertingPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertingPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertingPush.Merge(m, src)
}
func (m *AlertingPush) XXX_Size() int {
	return m.Size()
}
func (m *AlertingPush) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertingPush.DiscardUnknown(m)
}

var xxx_messageInfo_AlertingPush proto.InternalMessageInfo

type isAlertingPush_AlertBody interface {
	isAlertingPush_AlertBody()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAlertingPush_AlertTitle interface {
	isAlertingPush_AlertTitle()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AlertingPush_LocAlertBody struct {
	LocAlertBody *Localizeable `protobuf:"bytes,1,opt,name=loc_alert_body,json=locAlertBody,proto3,oneof" json:"loc_alert_body,omitempty"`
}
type AlertingPush_SimpleAlertBody struct {
	SimpleAlertBody string `protobuf:"bytes,2,opt,name=simple_alert_body,json=simpleAlertBody,proto3,oneof" json:"simple_alert_body,omitempty"`
}
type AlertingPush_LocAlertTitle struct {
	LocAlertTitle *Localizeable `protobuf:"bytes,3,opt,name=loc_alert_title,json=locAlertTitle,proto3,oneof" json:"loc_alert_title,omitempty"`
}
type AlertingPush_SimpleAlertTitle struct {
	SimpleAlertTitle string `protobuf:"bytes,4,opt,name=simple_alert_title,json=simpleAlertTitle,proto3,oneof" json:"simple_alert_title,omitempty"`
}

func (*AlertingPush_LocAlertBody) isAlertingPush_AlertBody()      {}
func (*AlertingPush_SimpleAlertBody) isAlertingPush_AlertBody()   {}
func (*AlertingPush_LocAlertTitle) isAlertingPush_AlertTitle()    {}
func (*AlertingPush_SimpleAlertTitle) isAlertingPush_AlertTitle() {}

func (m *AlertingPush) GetAlertBody() isAlertingPush_AlertBody {
	if m != nil {
		return m.AlertBody
	}
	return nil
}
func (m *AlertingPush) GetAlertTitle() isAlertingPush_AlertTitle {
	if m != nil {
		return m.AlertTitle
	}
	return nil
}

func (m *AlertingPush) GetLocAlertBody() *Localizeable {
	if x, ok := m.GetAlertBody().(*AlertingPush_LocAlertBody); ok {
		return x.LocAlertBody
	}
	return nil
}

func (m *AlertingPush) GetSimpleAlertBody() string {
	if x, ok := m.GetAlertBody().(*AlertingPush_SimpleAlertBody); ok {
		return x.SimpleAlertBody
	}
	return ""
}

func (m *AlertingPush) GetLocAlertTitle() *Localizeable {
	if x, ok := m.GetAlertTitle().(*AlertingPush_LocAlertTitle); ok {
		return x.LocAlertTitle
	}
	return nil
}

func (m *AlertingPush) GetSimpleAlertTitle() string {
	if x, ok := m.GetAlertTitle().(*AlertingPush_SimpleAlertTitle); ok {
		return x.SimpleAlertTitle
	}
	return ""
}

func (m *AlertingPush) GetBadge() int32 {
	if m != nil {
		return m.Badge
	}
	return 0
}

func (m *AlertingPush) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *AlertingPush) GetMid() *types.StringValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *AlertingPush) GetCategory() *types.StringValue {
	if m != nil {
		return m.Category
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AlertingPush) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AlertingPush_LocAlertBody)(nil),
		(*AlertingPush_SimpleAlertBody)(nil),
		(*AlertingPush_LocAlertTitle)(nil),
		(*AlertingPush_SimpleAlertTitle)(nil),
	}
}

type VoipPush struct {
	CallId         int64           `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	AttemptIndex   int32           `protobuf:"varint,2,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
	DisplayName    string          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	EventBusId     string          `protobuf:"bytes,4,opt,name=event_bus_id,json=eventBusId,proto3" json:"event_bus_id,omitempty"`
	Peer           *Peer           `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	UpdateType     string          `protobuf:"bytes,6,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`
	DisposalReason string          `protobuf:"bytes,7,opt,name=disposal_reason,json=disposalReason,proto3" json:"disposal_reason,omitempty"`
	OutPeer        *OutPeer        `protobuf:"bytes,8,opt,name=outPeer,proto3" json:"outPeer,omitempty"`
	Video          bool            `protobuf:"varint,9,opt,name=video,proto3" json:"video,omitempty"`
	CallIdStr      string          `protobuf:"bytes,10,opt,name=call_id_str,json=callIdStr,proto3" json:"call_id_str,omitempty"`
	Token          string          `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	Endpoint       string          `protobuf:"bytes,12,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Merge          *MergeCallModel `protobuf:"bytes,13,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (m *VoipPush) Reset()      { *m = VoipPush{} }
func (*VoipPush) ProtoMessage() {}
func (*VoipPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{6}
}
func (m *VoipPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoipPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoipPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoipPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoipPush.Merge(m, src)
}
func (m *VoipPush) XXX_Size() int {
	return m.Size()
}
func (m *VoipPush) XXX_DiscardUnknown() {
	xxx_messageInfo_VoipPush.DiscardUnknown(m)
}

var xxx_messageInfo_VoipPush proto.InternalMessageInfo

func (m *VoipPush) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *VoipPush) GetAttemptIndex() int32 {
	if m != nil {
		return m.AttemptIndex
	}
	return 0
}

func (m *VoipPush) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VoipPush) GetEventBusId() string {
	if m != nil {
		return m.EventBusId
	}
	return ""
}

func (m *VoipPush) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *VoipPush) GetUpdateType() string {
	if m != nil {
		return m.UpdateType
	}
	return ""
}

func (m *VoipPush) GetDisposalReason() string {
	if m != nil {
		return m.DisposalReason
	}
	return ""
}

func (m *VoipPush) GetOutPeer() *OutPeer {
	if m != nil {
		return m.OutPeer
	}
	return nil
}

func (m *VoipPush) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *VoipPush) GetCallIdStr() string {
	if m != nil {
		return m.CallIdStr
	}
	return ""
}

func (m *VoipPush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VoipPush) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *VoipPush) GetMerge() *MergeCallModel {
	if m != nil {
		return m.Merge
	}
	return nil
}

type EncryptedPush struct {
	PublicAlertingPush *AlertingPush `protobuf:"bytes,1,opt,name=public_alerting_push,json=publicAlertingPush,proto3" json:"public_alerting_push,omitempty"`
	EncryptedData      []byte        `protobuf:"bytes,2,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	Nonce              int64         `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EncryptedPush) Reset()      { *m = EncryptedPush{} }
func (*EncryptedPush) ProtoMessage() {}
func (*EncryptedPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{7}
}
func (m *EncryptedPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedPush.Merge(m, src)
}
func (m *EncryptedPush) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedPush) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedPush.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedPush proto.InternalMessageInfo

func (m *EncryptedPush) GetPublicAlertingPush() *AlertingPush {
	if m != nil {
		return m.PublicAlertingPush
	}
	return nil
}

func (m *EncryptedPush) GetEncryptedData() []byte {
	if m != nil {
		return m.EncryptedData
	}
	return nil
}

func (m *EncryptedPush) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type ReadPush struct {
	Peer         *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	LastReadDate int64 `protobuf:"varint,2,opt,name=last_read_date,json=lastReadDate,proto3" json:"last_read_date,omitempty"`
}

func (m *ReadPush) Reset()      { *m = ReadPush{} }
func (*ReadPush) ProtoMessage() {}
func (*ReadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{8}
}
func (m *ReadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadPush.Merge(m, src)
}
func (m *ReadPush) XXX_Size() int {
	return m.Size()
}
func (m *ReadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadPush.DiscardUnknown(m)
}

var xxx_messageInfo_ReadPush proto.InternalMessageInfo

func (m *ReadPush) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ReadPush) GetLastReadDate() int64 {
	if m != nil {
		return m.LastReadDate
	}
	return 0
}

type PushBody struct {
	CollapseKey string `protobuf:"bytes,1,opt,name=collapse_key,json=collapseKey,proto3" json:"collapse_key,omitempty"`
	TimeToLive  int32  `protobuf:"varint,2,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
	Seq         int32  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*PushBody_SilentPush
	//	*PushBody_AlertingPush
	//	*PushBody_VoipPush
	//	*PushBody_EncryptedPush
	//	*PushBody_ReadPush
	Body isPushBody_Body `protobuf_oneof:"body"`
}

func (m *PushBody) Reset()      { *m = PushBody{} }
func (*PushBody) ProtoMessage() {}
func (*PushBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{9}
}
func (m *PushBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushBody.Merge(m, src)
}
func (m *PushBody) XXX_Size() int {
	return m.Size()
}
func (m *PushBody) XXX_DiscardUnknown() {
	xxx_messageInfo_PushBody.DiscardUnknown(m)
}

var xxx_messageInfo_PushBody proto.InternalMessageInfo

type isPushBody_Body interface {
	isPushBody_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PushBody_SilentPush struct {
	SilentPush *SilentPush `protobuf:"bytes,4,opt,name=silent_push,json=silentPush,proto3,oneof" json:"silent_push,omitempty"`
}
type PushBody_AlertingPush struct {
	AlertingPush *AlertingPush `protobuf:"bytes,5,opt,name=alerting_push,json=alertingPush,proto3,oneof" json:"alerting_push,omitempty"`
}
type PushBody_VoipPush struct {
	VoipPush *VoipPush `protobuf:"bytes,6,opt,name=voip_push,json=voipPush,proto3,oneof" json:"voip_push,omitempty"`
}
type PushBody_EncryptedPush struct {
	EncryptedPush *EncryptedPush `protobuf:"bytes,7,opt,name=encrypted_push,json=encryptedPush,proto3,oneof" json:"encrypted_push,omitempty"`
}
type PushBody_ReadPush struct {
	ReadPush *ReadPush `protobuf:"bytes,8,opt,name=read_push,json=readPush,proto3,oneof" json:"read_push,omitempty"`
}

func (*PushBody_SilentPush) isPushBody_Body()    {}
func (*PushBody_AlertingPush) isPushBody_Body()  {}
func (*PushBody_VoipPush) isPushBody_Body()      {}
func (*PushBody_EncryptedPush) isPushBody_Body() {}
func (*PushBody_ReadPush) isPushBody_Body()      {}

func (m *PushBody) GetBody() isPushBody_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *PushBody) GetCollapseKey() string {
	if m != nil {
		return m.CollapseKey
	}
	return ""
}

func (m *PushBody) GetTimeToLive() int32 {
	if m != nil {
		return m.TimeToLive
	}
	return 0
}

func (m *PushBody) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PushBody) GetSilentPush() *SilentPush {
	if x, ok := m.GetBody().(*PushBody_SilentPush); ok {
		return x.SilentPush
	}
	return nil
}

func (m *PushBody) GetAlertingPush() *AlertingPush {
	if x, ok := m.GetBody().(*PushBody_AlertingPush); ok {
		return x.AlertingPush
	}
	return nil
}

func (m *PushBody) GetVoipPush() *VoipPush {
	if x, ok := m.GetBody().(*PushBody_VoipPush); ok {
		return x.VoipPush
	}
	return nil
}

func (m *PushBody) GetEncryptedPush() *EncryptedPush {
	if x, ok := m.GetBody().(*PushBody_EncryptedPush); ok {
		return x.EncryptedPush
	}
	return nil
}

func (m *PushBody) GetReadPush() *ReadPush {
	if x, ok := m.GetBody().(*PushBody_ReadPush); ok {
		return x.ReadPush
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PushBody) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PushBody_SilentPush)(nil),
		(*PushBody_AlertingPush)(nil),
		(*PushBody_VoipPush)(nil),
		(*PushBody_EncryptedPush)(nil),
		(*PushBody_ReadPush)(nil),
	}
}

type DeviceIdList struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *DeviceIdList) Reset()      { *m = DeviceIdList{} }
func (*DeviceIdList) ProtoMessage() {}
func (*DeviceIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{10}
}
func (m *DeviceIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceIdList.Merge(m, src)
}
func (m *DeviceIdList) XXX_Size() int {
	return m.Size()
}
func (m *DeviceIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceIdList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceIdList proto.InternalMessageInfo

func (m *DeviceIdList) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Push struct {
	Destinations  map[string]*DeviceIdList `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body          *PushBody                `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	CorrelationId string                   `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *Push) Reset()      { *m = Push{} }
func (*Push) ProtoMessage() {}
func (*Push) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{11}
}
func (m *Push) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Push) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Push.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Push) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Push.Merge(m, src)
}
func (m *Push) XXX_Size() int {
	return m.Size()
}
func (m *Push) XXX_DiscardUnknown() {
	xxx_messageInfo_Push.DiscardUnknown(m)
}

var xxx_messageInfo_Push proto.InternalMessageInfo

func (m *Push) GetDestinations() map[string]*DeviceIdList {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Push) GetBody() *PushBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Push) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type Response struct {
	ProjectInvalidations map[string]*DeviceIdList `protobuf:"bytes,1,rep,name=project_invalidations,json=projectInvalidations,proto3" json:"project_invalidations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{12}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetProjectInvalidations() map[string]*DeviceIdList {
	if m != nil {
		return m.ProjectInvalidations
	}
	return nil
}

type PingRequest struct {
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{13}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PongResponse struct {
}

func (m *PongResponse) Reset()      { *m = PongResponse{} }
func (*PongResponse) ProtoMessage() {}
func (*PongResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09873f3d052f6519, []int{14}
}
func (m *PongResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PongResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PongResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PongResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongResponse.Merge(m, src)
}
func (m *PongResponse) XXX_Size() int {
	return m.Size()
}
func (m *PongResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PongResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PongResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("main.PeerType", PeerType_name, PeerType_value)
	proto.RegisterType((*SilentPush)(nil), "main.SilentPush")
	proto.RegisterType((*Localizeable)(nil), "main.Localizeable")
	proto.RegisterType((*Peer)(nil), "main.Peer")
	proto.RegisterType((*OutPeer)(nil), "main.OutPeer")
	proto.RegisterType((*MergeCallModel)(nil), "main.MergeCallModel")
	proto.RegisterType((*AlertingPush)(nil), "main.AlertingPush")
	proto.RegisterType((*VoipPush)(nil), "main.VoipPush")
	proto.RegisterType((*EncryptedPush)(nil), "main.EncryptedPush")
	proto.RegisterType((*ReadPush)(nil), "main.ReadPush")
	proto.RegisterType((*PushBody)(nil), "main.PushBody")
	proto.RegisterType((*DeviceIdList)(nil), "main.DeviceIdList")
	proto.RegisterType((*Push)(nil), "main.Push")
	proto.RegisterMapType((map[string]*DeviceIdList)(nil), "main.Push.DestinationsEntry")
	proto.RegisterType((*Response)(nil), "main.Response")
	proto.RegisterMapType((map[string]*DeviceIdList)(nil), "main.Response.ProjectInvalidationsEntry")
	proto.RegisterType((*PingRequest)(nil), "main.PingRequest")
	proto.RegisterType((*PongResponse)(nil), "main.PongResponse")
}

func init() { proto.RegisterFile("push_service.proto", fileDescriptor_09873f3d052f6519) }

var fileDescriptor_09873f3d052f6519 = []byte{
	// 1301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x1b, 0x8f, 0x37, 0xff, 0x9f, 0x38, 0xe9, 0x76, 0xba, 0xab, 0xa6, 0xab, 0xf7, 0xf5, 0xbb, 0xf5,
	0x0b, 0xea, 0xaa, 0x50, 0x2f, 0x6a, 0x2f, 0xa5, 0xaa, 0x04, 0x5d, 0xb6, 0x62, 0x23, 0x5a, 0x48,
	0xbd, 0x55, 0x0f, 0x20, 0x64, 0x4d, 0xec, 0x07, 0xef, 0x50, 0xc7, 0xe3, 0x7a, 0x26, 0x81, 0x70,
	0xe2, 0x23, 0x20, 0x0e, 0x7c, 0x01, 0x2e, 0x7c, 0x00, 0x3e, 0x03, 0xe2, 0xd8, 0x63, 0x8f, 0x34,
	0xbd, 0xf4, 0xd8, 0x0b, 0x77, 0x34, 0x33, 0xf6, 0xc6, 0x11, 0x5d, 0x84, 0xe0, 0x94, 0x3c, 0xff,
	0xe6, 0xf7, 0xcc, 0xef, 0xf9, 0x33, 0x06, 0x92, 0xcd, 0xc4, 0x49, 0x20, 0x30, 0x9f, 0xb3, 0x10,
	0xbd, 0x2c, 0xe7, 0x92, 0x93, 0xc6, 0x94, 0xb2, 0x74, 0xc7, 0x89, 0x39, 0x8f, 0x13, 0xdc, 0xd7,
	0xba, 0xc9, 0xec, 0x8b, 0xfd, 0xaf, 0x72, 0x9a, 0x65, 0x98, 0x0b, 0xe3, 0xb5, 0xb3, 0x2d, 0x42,
	0x9a, 0xd0, 0x6c, 0xb2, 0x5f, 0xfc, 0x1a, 0xb5, 0x6b, 0x03, 0x1c, 0xb3, 0x04, 0x53, 0x39, 0x9e,
	0x89, 0x13, 0xf7, 0x00, 0xec, 0x7b, 0x3c, 0xa4, 0x09, 0xfb, 0x06, 0xe9, 0x24, 0x41, 0x72, 0x11,
	0xda, 0x09, 0x0f, 0x83, 0xc7, 0xb8, 0x18, 0x5a, 0xbb, 0xd6, 0x5e, 0xd7, 0x6f, 0x25, 0x3c, 0xfc,
	0x08, 0x17, 0xe4, 0x12, 0x74, 0x94, 0x81, 0xe6, 0xb1, 0x18, 0x6e, 0xec, 0xd6, 0xf7, 0xba, 0xbe,
	0x72, 0xbc, 0x93, 0xc7, 0xc2, 0x7d, 0x00, 0x8d, 0x31, 0x62, 0x4e, 0x5c, 0x68, 0xc8, 0x45, 0x86,
	0x3a, 0x70, 0x70, 0x7d, 0xe0, 0xa9, 0x2c, 0x3d, 0x65, 0x79, 0xb8, 0xc8, 0xd0, 0xd7, 0x36, 0x32,
	0x80, 0x0d, 0x16, 0x0d, 0x37, 0x76, 0xad, 0xbd, 0xa6, 0xbf, 0xc1, 0x22, 0xb2, 0x0d, 0x2d, 0x21,
	0xf3, 0x80, 0x45, 0xc3, 0xba, 0x86, 0x6b, 0x0a, 0x99, 0x8f, 0x22, 0x57, 0x42, 0xfb, 0x93, 0x99,
	0xfc, 0xc7, 0xa7, 0x3a, 0x00, 0x34, 0x0c, 0x51, 0x88, 0x23, 0x2a, 0x4e, 0xf4, 0xc9, 0x75, 0xbf,
	0xa2, 0xa9, 0xa0, 0x36, 0xaa, 0xa8, 0x37, 0x61, 0x70, 0x1f, 0xf3, 0x18, 0x3f, 0xa0, 0x49, 0x72,
	0x9f, 0x47, 0x98, 0x90, 0x4d, 0xa8, 0xaf, 0xa8, 0x50, 0x7f, 0xc9, 0x16, 0x34, 0xa7, 0xca, 0x47,
	0xa3, 0x75, 0x7c, 0x23, 0xb8, 0x3f, 0xd6, 0xc1, 0xbe, 0x93, 0x60, 0x2e, 0x59, 0x1a, 0x2b, 0x5e,
	0xc9, 0x2d, 0x18, 0x68, 0xba, 0x94, 0x2e, 0x98, 0xf0, 0xc8, 0x9c, 0xd1, 0xbb, 0x4e, 0x4c, 0xfe,
	0x55, 0xce, 0x8f, 0x6a, 0xbe, 0xad, 0xa8, 0x54, 0xae, 0x07, 0x3c, 0x5a, 0x90, 0xb7, 0xe1, 0xbc,
	0x60, 0xd3, 0x2c, 0xc1, 0x6a, 0xb8, 0x82, 0xeb, 0x1e, 0xd5, 0xfc, 0x73, 0xc6, 0xb4, 0xf2, 0xbe,
	0x0d, 0xe7, 0x56, 0x48, 0x92, 0xc9, 0x04, 0xf5, 0x85, 0x5f, 0x0f, 0x65, 0xf9, 0xfd, 0x12, 0xea,
	0xa1, 0x72, 0x25, 0x1e, 0x90, 0x35, 0x2c, 0x73, 0x80, 0x66, 0xe5, 0xc8, 0xf2, 0x37, 0x2b, 0x60,
	0xc6, 0x7f, 0x0b, 0x9a, 0x13, 0x1a, 0xc5, 0x38, 0x6c, 0x69, 0xb2, 0x8d, 0x40, 0x1c, 0x68, 0x64,
	0x88, 0xf9, 0xb0, 0xad, 0x81, 0x61, 0x55, 0x23, 0x5f, 0xeb, 0x89, 0x07, 0xf5, 0x29, 0x8b, 0x86,
	0x1d, 0x6d, 0xfe, 0x8f, 0x67, 0x1a, 0xd7, 0x2b, 0x1b, 0xd7, 0x3b, 0x96, 0x39, 0x4b, 0xe3, 0x47,
	0x34, 0x99, 0xa1, 0xaf, 0x1c, 0xc9, 0x4d, 0xe8, 0x84, 0x54, 0x62, 0xcc, 0xf3, 0xc5, 0xb0, 0xfb,
	0x37, 0x82, 0x4e, 0xbd, 0x0f, 0x6c, 0x80, 0x15, 0x69, 0x07, 0x7d, 0xe8, 0x55, 0xae, 0xe5, 0xfe,
	0x5c, 0x87, 0xce, 0x23, 0xce, 0x32, 0x5d, 0xa1, 0x8b, 0xd0, 0x0e, 0x69, 0x92, 0xa8, 0x26, 0xb0,
	0x74, 0x83, 0xb4, 0x94, 0x38, 0x8a, 0xc8, 0xff, 0xa1, 0x4f, 0xa5, 0xc4, 0x69, 0x26, 0x03, 0x96,
	0x46, 0xf8, 0x75, 0xd1, 0x57, 0x76, 0xa1, 0x1c, 0x29, 0x1d, 0xb9, 0x0c, 0x76, 0xc4, 0x44, 0x96,
	0xd0, 0x45, 0x90, 0xd2, 0x29, 0x16, 0xdd, 0xdb, 0x2b, 0x74, 0x1f, 0xd3, 0x29, 0x92, 0x5d, 0xb0,
	0x71, 0x8e, 0xa9, 0x0c, 0x26, 0x33, 0xb1, 0x6a, 0x35, 0xd0, 0xba, 0x83, 0x99, 0x18, 0x45, 0xa7,
	0xb4, 0x35, 0xcf, 0xa0, 0xed, 0x7f, 0xd0, 0x9b, 0x65, 0x11, 0x95, 0x18, 0xe8, 0x09, 0x68, 0x99,
	0x03, 0x8c, 0x4a, 0x75, 0x3f, 0xb9, 0x02, 0xe7, 0x14, 0x22, 0x17, 0x34, 0x09, 0x72, 0xa4, 0x82,
	0xa7, 0xba, 0x04, 0x5d, 0x7f, 0x50, 0xaa, 0x7d, 0xad, 0x25, 0x57, 0xa0, 0xcd, 0xcd, 0x3c, 0x15,
	0x45, 0xe8, 0x1b, 0xb0, 0x62, 0xc8, 0xfc, 0xd2, 0xaa, 0xea, 0x3b, 0x67, 0x11, 0x72, 0x4d, 0x7b,
	0xc7, 0x37, 0x02, 0x71, 0xa0, 0x57, 0x70, 0x15, 0x08, 0x99, 0x0f, 0x41, 0x63, 0x74, 0x0d, 0x5f,
	0xc7, 0x52, 0x47, 0x49, 0xfe, 0x18, 0xd3, 0x61, 0xcf, 0x8c, 0x93, 0x16, 0xc8, 0x0e, 0x74, 0x30,
	0x8d, 0x32, 0xce, 0x52, 0x39, 0xb4, 0xb5, 0xe1, 0x54, 0x26, 0x57, 0xcb, 0x31, 0xea, 0xeb, 0x74,
	0xb6, 0x4c, 0x3a, 0xeb, 0xd3, 0x57, 0x0e, 0xd7, 0xf7, 0x16, 0xf4, 0xef, 0xa6, 0x61, 0xbe, 0xc8,
	0x24, 0x46, 0xba, 0x76, 0x87, 0xb0, 0x95, 0xcd, 0x26, 0x09, 0x2b, 0xda, 0x9e, 0xa5, 0x71, 0xa0,
	0xd6, 0xe4, 0xfa, 0x8c, 0x55, 0xe7, 0xd1, 0x27, 0xc6, 0x7f, 0x6d, 0x46, 0xdf, 0x84, 0x01, 0x96,
	0xc7, 0x06, 0x11, 0x95, 0x54, 0x57, 0xda, 0xf6, 0xfb, 0xa7, 0xda, 0x43, 0x2a, 0xa9, 0xba, 0x5c,
	0xca, 0xd3, 0x10, 0x8b, 0x3d, 0x62, 0x04, 0x77, 0x0c, 0x1d, 0x1f, 0xa9, 0x49, 0xa7, 0xac, 0xa3,
	0x75, 0x46, 0x1d, 0xdf, 0x80, 0x41, 0x42, 0x85, 0x54, 0x25, 0xd2, 0x40, 0x66, 0x79, 0xd4, 0x7d,
	0x5b, 0x69, 0xd5, 0x29, 0x87, 0x54, 0xa2, 0xfb, 0xfb, 0x06, 0x74, 0xd4, 0x71, 0x7a, 0xaa, 0x2f,
	0x83, 0x1d, 0xf2, 0x24, 0xa1, 0x99, 0xc0, 0xca, 0x32, 0xee, 0x95, 0x3a, 0xb5, 0x91, 0x77, 0xc1,
	0x96, 0x6c, 0x8a, 0x81, 0xe4, 0x41, 0xc2, 0xe6, 0x58, 0xb4, 0x29, 0x28, 0xdd, 0x43, 0x7e, 0x8f,
	0xcd, 0x51, 0x6d, 0x2f, 0x81, 0x4f, 0x74, 0xde, 0x4d, 0x5f, 0xfd, 0x25, 0x37, 0xa0, 0x27, 0xf4,
	0xf2, 0x37, 0x7c, 0x35, 0x74, 0xc2, 0x9b, 0x26, 0xe1, 0xd5, 0xab, 0x70, 0x54, 0xf3, 0x41, 0x9c,
	0x4a, 0xe4, 0x5d, 0xe8, 0xaf, 0xd3, 0xdc, 0x3c, 0x8b, 0x66, 0xb5, 0xca, 0x68, 0x95, 0xe2, 0x6b,
	0xd0, 0x9d, 0x73, 0x96, 0x99, 0xb0, 0x96, 0x0e, 0x2b, 0x36, 0x78, 0x39, 0x87, 0x47, 0x35, 0xbf,
	0x33, 0x2f, 0x67, 0xf2, 0x76, 0xb5, 0x22, 0x3a, 0xc6, 0x6c, 0x94, 0x0b, 0x26, 0x66, 0xad, 0x09,
	0x8e, 0x6a, 0x95, 0x42, 0x95, 0x60, 0x9a, 0x61, 0x1d, 0xd8, 0xa9, 0x82, 0x95, 0x95, 0x52, 0x60,
	0x79, 0xf1, 0xff, 0xa0, 0x05, 0x0d, 0xb5, 0x24, 0xdc, 0x6b, 0x60, 0x1f, 0xa2, 0x7a, 0x5d, 0x47,
	0xd1, 0x3d, 0x26, 0x24, 0xf9, 0x2f, 0x40, 0xa4, 0xe5, 0x80, 0x45, 0x62, 0x68, 0xe9, 0xb7, 0xae,
	0x1b, 0x15, 0x1e, 0xc2, 0x7d, 0x69, 0x41, 0x43, 0xc3, 0xbd, 0x0f, 0x76, 0x84, 0x42, 0xb2, 0x94,
	0x4a, 0xc6, 0x53, 0xe3, 0xa9, 0x16, 0x95, 0xa9, 0xfe, 0x4c, 0x9c, 0x78, 0x87, 0x15, 0xf3, 0xdd,
	0x54, 0xe6, 0x0b, 0x7f, 0x2d, 0x42, 0x3d, 0x6d, 0xa7, 0xbb, 0xfd, 0x34, 0xd7, 0xb2, 0x05, 0x7c,
	0x6d, 0x53, 0x4d, 0x1a, 0xf2, 0x3c, 0xc7, 0x44, 0xc7, 0xac, 0x1e, 0xca, 0x7e, 0x45, 0x3b, 0x8a,
	0x76, 0x8e, 0xe1, 0xfc, 0x9f, 0xd0, 0x5e, 0xf3, 0x7a, 0xed, 0x41, 0x73, 0xae, 0x36, 0x66, 0x01,
	0x59, 0x94, 0xb0, 0x7a, 0x7d, 0xdf, 0x38, 0xdc, 0xda, 0xb8, 0x69, 0xb9, 0xbf, 0x58, 0xaa, 0xc9,
	0x45, 0xc6, 0x53, 0x81, 0xe4, 0x73, 0xd8, 0xce, 0x72, 0xfe, 0x25, 0x86, 0x6a, 0x2d, 0xce, 0x69,
	0xc2, 0xa2, 0xb5, 0x7b, 0xef, 0x95, 0x4c, 0x1b, 0x77, 0x6f, 0x6c, 0x7c, 0x47, 0x55, 0x57, 0xc3,
	0xc1, 0x56, 0xf6, 0x1a, 0xd3, 0xce, 0x67, 0x70, 0xe9, 0xcc, 0x90, 0x7f, 0x7d, 0x91, 0x3e, 0xf4,
	0xc6, 0x2c, 0x8d, 0x7d, 0x7c, 0x32, 0x43, 0x21, 0xdd, 0x01, 0xd8, 0x63, 0xae, 0x44, 0x93, 0xeb,
	0xd5, 0xb7, 0xa0, 0x53, 0x7e, 0x50, 0x90, 0x1e, 0xb4, 0xc7, 0x39, 0x9b, 0x53, 0x89, 0x9b, 0x35,
	0xd2, 0x85, 0xe6, 0x87, 0x39, 0x9f, 0x65, 0x9b, 0x16, 0x69, 0x43, 0xfd, 0x78, 0x34, 0xde, 0xdc,
	0xb8, 0xfe, 0x83, 0x05, 0x6d, 0x55, 0x23, 0x96, 0xc6, 0x64, 0x1f, 0x1a, 0xea, 0x5c, 0x72, 0xbe,
	0x28, 0xdd, 0x0a, 0x63, 0xa7, 0xc8, 0xa8, 0x8a, 0xe3, 0xd6, 0x88, 0x07, 0xa0, 0x62, 0x8f, 0x65,
	0x8e, 0x74, 0x4a, 0x60, 0x55, 0xf1, 0x9d, 0xc1, 0x3a, 0x7f, 0x6e, 0x6d, 0xcf, 0x7a, 0xc7, 0x22,
	0x57, 0xd5, 0xc7, 0x5a, 0x1a, 0x27, 0xa8, 0x3b, 0xee, 0x2f, 0xfd, 0x0f, 0x1e, 0x2c, 0xdf, 0xdb,
	0x86, 0x0b, 0x6c, 0xea, 0x45, 0x49, 0xec, 0xa9, 0x19, 0xf0, 0x8a, 0xaf, 0xc6, 0xa7, 0xcf, 0x9d,
	0xda, 0xb3, 0xe7, 0x4e, 0xed, 0xd5, 0x73, 0xc7, 0xfa, 0x76, 0xe9, 0x58, 0x3f, 0x2d, 0x1d, 0xeb,
	0xd7, 0xa5, 0x63, 0x3d, 0x5d, 0x3a, 0xd6, 0x6f, 0x4b, 0xc7, 0x7a, 0xb9, 0x74, 0x6a, 0xaf, 0x96,
	0x8e, 0xf5, 0xdd, 0x0b, 0xa7, 0xf6, 0xf4, 0x85, 0x53, 0x7b, 0xf6, 0xc2, 0xa9, 0x7d, 0x5a, 0xa7,
	0x19, 0x9b, 0xb4, 0xf4, 0x6b, 0x7b, 0xe3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x92, 0x02,
	0x4e, 0x85, 0x0a, 0x00, 0x00,
}

func (x PeerType) String() string {
	s, ok := PeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SilentPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SilentPush)
	if !ok {
		that2, ok := that.(SilentPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Localizeable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Localizeable)
	if !ok {
		that2, ok := that.(Localizeable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocKey != that1.LocKey {
		return false
	}
	if len(this.LocArgs) != len(that1.LocArgs) {
		return false
	}
	for i := range this.LocArgs {
		if this.LocArgs[i] != that1.LocArgs[i] {
			return false
		}
	}
	return true
}
func (this *Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Peer)
	if !ok {
		that2, ok := that.(Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.StrId != that1.StrId {
		return false
	}
	return true
}
func (this *OutPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutPeer)
	if !ok {
		that2, ok := that.(OutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.StrId != that1.StrId {
		return false
	}
	return true
}
func (this *MergeCallModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MergeCallModel)
	if !ok {
		that2, ok := that.(MergeCallModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Merge != that1.Merge {
		return false
	}
	return true
}
func (this *AlertingPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertingPush)
	if !ok {
		that2, ok := that.(AlertingPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AlertBody == nil {
		if this.AlertBody != nil {
			return false
		}
	} else if this.AlertBody == nil {
		return false
	} else if !this.AlertBody.Equal(that1.AlertBody) {
		return false
	}
	if that1.AlertTitle == nil {
		if this.AlertTitle != nil {
			return false
		}
	} else if this.AlertTitle == nil {
		return false
	} else if !this.AlertTitle.Equal(that1.AlertTitle) {
		return false
	}
	if this.Badge != that1.Badge {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *AlertingPush_LocAlertBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertingPush_LocAlertBody)
	if !ok {
		that2, ok := that.(AlertingPush_LocAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocAlertBody.Equal(that1.LocAlertBody) {
		return false
	}
	return true
}
func (this *AlertingPush_SimpleAlertBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertingPush_SimpleAlertBody)
	if !ok {
		that2, ok := that.(AlertingPush_SimpleAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAlertBody != that1.SimpleAlertBody {
		return false
	}
	return true
}
func (this *AlertingPush_LocAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertingPush_LocAlertTitle)
	if !ok {
		that2, ok := that.(AlertingPush_LocAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocAlertTitle.Equal(that1.LocAlertTitle) {
		return false
	}
	return true
}
func (this *AlertingPush_SimpleAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertingPush_SimpleAlertTitle)
	if !ok {
		that2, ok := that.(AlertingPush_SimpleAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAlertTitle != that1.SimpleAlertTitle {
		return false
	}
	return true
}
func (this *VoipPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoipPush)
	if !ok {
		that2, ok := that.(VoipPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.AttemptIndex != that1.AttemptIndex {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.EventBusId != that1.EventBusId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UpdateType != that1.UpdateType {
		return false
	}
	if this.DisposalReason != that1.DisposalReason {
		return false
	}
	if !this.OutPeer.Equal(that1.OutPeer) {
		return false
	}
	if this.Video != that1.Video {
		return false
	}
	if this.CallIdStr != that1.CallIdStr {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if !this.Merge.Equal(that1.Merge) {
		return false
	}
	return true
}
func (this *EncryptedPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPush)
	if !ok {
		that2, ok := that.(EncryptedPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicAlertingPush.Equal(that1.PublicAlertingPush) {
		return false
	}
	if !bytes.Equal(this.EncryptedData, that1.EncryptedData) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (this *ReadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadPush)
	if !ok {
		that2, ok := that.(ReadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastReadDate != that1.LastReadDate {
		return false
	}
	return true
}
func (this *PushBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody)
	if !ok {
		that2, ok := that.(PushBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollapseKey != that1.CollapseKey {
		return false
	}
	if this.TimeToLive != that1.TimeToLive {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *PushBody_SilentPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody_SilentPush)
	if !ok {
		that2, ok := that.(PushBody_SilentPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SilentPush.Equal(that1.SilentPush) {
		return false
	}
	return true
}
func (this *PushBody_AlertingPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody_AlertingPush)
	if !ok {
		that2, ok := that.(PushBody_AlertingPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlertingPush.Equal(that1.AlertingPush) {
		return false
	}
	return true
}
func (this *PushBody_VoipPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody_VoipPush)
	if !ok {
		that2, ok := that.(PushBody_VoipPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoipPush.Equal(that1.VoipPush) {
		return false
	}
	return true
}
func (this *PushBody_EncryptedPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody_EncryptedPush)
	if !ok {
		that2, ok := that.(PushBody_EncryptedPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EncryptedPush.Equal(that1.EncryptedPush) {
		return false
	}
	return true
}
func (this *PushBody_ReadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBody_ReadPush)
	if !ok {
		that2, ok := that.(PushBody_ReadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReadPush.Equal(that1.ReadPush) {
		return false
	}
	return true
}
func (this *DeviceIdList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceIdList)
	if !ok {
		that2, ok := that.(DeviceIdList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceIds) != len(that1.DeviceIds) {
		return false
	}
	for i := range this.DeviceIds {
		if this.DeviceIds[i] != that1.DeviceIds[i] {
			return false
		}
	}
	return true
}
func (this *Push) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Push)
	if !ok {
		that2, ok := that.(Push)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if this.CorrelationId != that1.CorrelationId {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProjectInvalidations) != len(that1.ProjectInvalidations) {
		return false
	}
	for i := range this.ProjectInvalidations {
		if !this.ProjectInvalidations[i].Equal(that1.ProjectInvalidations[i]) {
			return false
		}
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PongResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PongResponse)
	if !ok {
		that2, ok := that.(PongResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SilentPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.SilentPush{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Localizeable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.Localizeable{")
	s = append(s, "LocKey: "+fmt.Sprintf("%#v", this.LocKey)+",\n")
	s = append(s, "LocArgs: "+fmt.Sprintf("%#v", this.LocArgs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.Peer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.OutPeer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MergeCallModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.MergeCallModel{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Merge: "+fmt.Sprintf("%#v", this.Merge)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertingPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&api.AlertingPush{")
	if this.AlertBody != nil {
		s = append(s, "AlertBody: "+fmt.Sprintf("%#v", this.AlertBody)+",\n")
	}
	if this.AlertTitle != nil {
		s = append(s, "AlertTitle: "+fmt.Sprintf("%#v", this.AlertTitle)+",\n")
	}
	s = append(s, "Badge: "+fmt.Sprintf("%#v", this.Badge)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertingPush_LocAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.AlertingPush_LocAlertBody{` +
		`LocAlertBody:` + fmt.Sprintf("%#v", this.LocAlertBody) + `}`}, ", ")
	return s
}
func (this *AlertingPush_SimpleAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.AlertingPush_SimpleAlertBody{` +
		`SimpleAlertBody:` + fmt.Sprintf("%#v", this.SimpleAlertBody) + `}`}, ", ")
	return s
}
func (this *AlertingPush_LocAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.AlertingPush_LocAlertTitle{` +
		`LocAlertTitle:` + fmt.Sprintf("%#v", this.LocAlertTitle) + `}`}, ", ")
	return s
}
func (this *AlertingPush_SimpleAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.AlertingPush_SimpleAlertTitle{` +
		`SimpleAlertTitle:` + fmt.Sprintf("%#v", this.SimpleAlertTitle) + `}`}, ", ")
	return s
}
func (this *VoipPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&api.VoipPush{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "EventBusId: "+fmt.Sprintf("%#v", this.EventBusId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UpdateType: "+fmt.Sprintf("%#v", this.UpdateType)+",\n")
	s = append(s, "DisposalReason: "+fmt.Sprintf("%#v", this.DisposalReason)+",\n")
	if this.OutPeer != nil {
		s = append(s, "OutPeer: "+fmt.Sprintf("%#v", this.OutPeer)+",\n")
	}
	s = append(s, "Video: "+fmt.Sprintf("%#v", this.Video)+",\n")
	s = append(s, "CallIdStr: "+fmt.Sprintf("%#v", this.CallIdStr)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	if this.Merge != nil {
		s = append(s, "Merge: "+fmt.Sprintf("%#v", this.Merge)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EncryptedPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.EncryptedPush{")
	if this.PublicAlertingPush != nil {
		s = append(s, "PublicAlertingPush: "+fmt.Sprintf("%#v", this.PublicAlertingPush)+",\n")
	}
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.ReadPush{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastReadDate: "+fmt.Sprintf("%#v", this.LastReadDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&api.PushBody{")
	s = append(s, "CollapseKey: "+fmt.Sprintf("%#v", this.CollapseKey)+",\n")
	s = append(s, "TimeToLive: "+fmt.Sprintf("%#v", this.TimeToLive)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBody_SilentPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.PushBody_SilentPush{` +
		`SilentPush:` + fmt.Sprintf("%#v", this.SilentPush) + `}`}, ", ")
	return s
}
func (this *PushBody_AlertingPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.PushBody_AlertingPush{` +
		`AlertingPush:` + fmt.Sprintf("%#v", this.AlertingPush) + `}`}, ", ")
	return s
}
func (this *PushBody_VoipPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.PushBody_VoipPush{` +
		`VoipPush:` + fmt.Sprintf("%#v", this.VoipPush) + `}`}, ", ")
	return s
}
func (this *PushBody_EncryptedPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.PushBody_EncryptedPush{` +
		`EncryptedPush:` + fmt.Sprintf("%#v", this.EncryptedPush) + `}`}, ", ")
	return s
}
func (this *PushBody_ReadPush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api.PushBody_ReadPush{` +
		`ReadPush:` + fmt.Sprintf("%#v", this.ReadPush) + `}`}, ", ")
	return s
}
func (this *DeviceIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeviceIdList{")
	s = append(s, "DeviceIds: "+fmt.Sprintf("%#v", this.DeviceIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Push) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.Push{")
	keysForDestinations := make([]string, 0, len(this.Destinations))
	for k, _ := range this.Destinations {
		keysForDestinations = append(keysForDestinations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDestinations)
	mapStringForDestinations := "map[string]*DeviceIdList{"
	for _, k := range keysForDestinations {
		mapStringForDestinations += fmt.Sprintf("%#v: %#v,", k, this.Destinations[k])
	}
	mapStringForDestinations += "}"
	if this.Destinations != nil {
		s = append(s, "Destinations: "+mapStringForDestinations+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "CorrelationId: "+fmt.Sprintf("%#v", this.CorrelationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.Response{")
	keysForProjectInvalidations := make([]string, 0, len(this.ProjectInvalidations))
	for k, _ := range this.ProjectInvalidations {
		keysForProjectInvalidations = append(keysForProjectInvalidations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProjectInvalidations)
	mapStringForProjectInvalidations := "map[string]*DeviceIdList{"
	for _, k := range keysForProjectInvalidations {
		mapStringForProjectInvalidations += fmt.Sprintf("%#v: %#v,", k, this.ProjectInvalidations[k])
	}
	mapStringForProjectInvalidations += "}"
	if this.ProjectInvalidations != nil {
		s = append(s, "ProjectInvalidations: "+mapStringForProjectInvalidations+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.PingRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PongResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.PongResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPushService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushingClient is the client API for Pushing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushingClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (Pushing_PushStreamClient, error)
	SinglePush(ctx context.Context, in *Push, opts ...grpc.CallOption) (*Response, error)
}

type pushingClient struct {
	cc *grpc.ClientConn
}

func NewPushingClient(cc *grpc.ClientConn) PushingClient {
	return &pushingClient{cc}
}

func (c *pushingClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/main.Pushing/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushingClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (Pushing_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pushing_serviceDesc.Streams[0], "/main.Pushing/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushingPushStreamClient{stream}
	return x, nil
}

type Pushing_PushStreamClient interface {
	Send(*Push) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type pushingPushStreamClient struct {
	grpc.ClientStream
}

func (x *pushingPushStreamClient) Send(m *Push) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushingPushStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushingClient) SinglePush(ctx context.Context, in *Push, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.Pushing/SinglePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushingServer is the server API for Pushing service.
type PushingServer interface {
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	PushStream(Pushing_PushStreamServer) error
	SinglePush(context.Context, *Push) (*Response, error)
}

// UnimplementedPushingServer can be embedded to have forward compatible implementations.
type UnimplementedPushingServer struct {
}

func (*UnimplementedPushingServer) Ping(ctx context.Context, req *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPushingServer) PushStream(srv Pushing_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}
func (*UnimplementedPushingServer) SinglePush(ctx context.Context, req *Push) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SinglePush not implemented")
}

func RegisterPushingServer(s *grpc.Server, srv PushingServer) {
	s.RegisterService(&_Pushing_serviceDesc, srv)
}

func _Pushing_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Pushing/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushingServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pushing_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushingServer).PushStream(&pushingPushStreamServer{stream})
}

type Pushing_PushStreamServer interface {
	Send(*Response) error
	Recv() (*Push, error)
	grpc.ServerStream
}

type pushingPushStreamServer struct {
	grpc.ServerStream
}

func (x *pushingPushStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushingPushStreamServer) Recv() (*Push, error) {
	m := new(Push)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pushing_SinglePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Push)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushingServer).SinglePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Pushing/SinglePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushingServer).SinglePush(ctx, req.(*Push))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pushing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Pushing",
	HandlerType: (*PushingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pushing_Ping_Handler,
		},
		{
			MethodName: "SinglePush",
			Handler:    _Pushing_SinglePush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _Pushing_PushStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "push_service.proto",
}

func (m *SilentPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SilentPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SilentPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Localizeable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Localizeable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Localizeable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocArgs) > 0 {
		for iNdEx := len(m.LocArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LocArgs[iNdEx])
			copy(dAtA[i:], m.LocArgs[iNdEx])
			i = encodeVarintPushService(dAtA, i, uint64(len(m.LocArgs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LocKey) > 0 {
		i -= len(m.LocKey)
		copy(dAtA[i:], m.LocKey)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.LocKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrId) > 0 {
		i -= len(m.StrId)
		copy(dAtA[i:], m.StrId)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.StrId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrId) > 0 {
		i -= len(m.StrId)
		copy(dAtA[i:], m.StrId)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.StrId)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MergeCallModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeCallModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MergeCallModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Merge {
		i--
		if m.Merge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlertingPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertingPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertingPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		{
			size, err := m.Category.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Badge != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Badge))
		i--
		dAtA[i] = 0x30
	}
	if m.AlertTitle != nil {
		{
			size := m.AlertTitle.Size()
			i -= size
			if _, err := m.AlertTitle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AlertBody != nil {
		{
			size := m.AlertBody.Size()
			i -= size
			if _, err := m.AlertBody.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AlertingPush_LocAlertBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertingPush_LocAlertBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocAlertBody != nil {
		{
			size, err := m.LocAlertBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AlertingPush_SimpleAlertBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertingPush_SimpleAlertBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SimpleAlertBody)
	copy(dAtA[i:], m.SimpleAlertBody)
	i = encodeVarintPushService(dAtA, i, uint64(len(m.SimpleAlertBody)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *AlertingPush_LocAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertingPush_LocAlertTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocAlertTitle != nil {
		{
			size, err := m.LocAlertTitle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AlertingPush_SimpleAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertingPush_SimpleAlertTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SimpleAlertTitle)
	copy(dAtA[i:], m.SimpleAlertTitle)
	i = encodeVarintPushService(dAtA, i, uint64(len(m.SimpleAlertTitle)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *VoipPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoipPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoipPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Merge != nil {
		{
			size, err := m.Merge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CallIdStr) > 0 {
		i -= len(m.CallIdStr)
		copy(dAtA[i:], m.CallIdStr)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.CallIdStr)))
		i--
		dAtA[i] = 0x52
	}
	if m.Video {
		i--
		if m.Video {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.OutPeer != nil {
		{
			size, err := m.OutPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.DisposalReason) > 0 {
		i -= len(m.DisposalReason)
		copy(dAtA[i:], m.DisposalReason)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.DisposalReason)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UpdateType) > 0 {
		i -= len(m.UpdateType)
		copy(dAtA[i:], m.UpdateType)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.UpdateType)))
		i--
		dAtA[i] = 0x32
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventBusId) > 0 {
		i -= len(m.EventBusId)
		copy(dAtA[i:], m.EventBusId)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.EventBusId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AttemptIndex != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.AttemptIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.CallId != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x12
	}
	if m.PublicAlertingPush != nil {
		{
			size, err := m.PublicAlertingPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReadDate != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.LastReadDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Seq != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeToLive != 0 {
		i = encodeVarintPushService(dAtA, i, uint64(m.TimeToLive))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollapseKey) > 0 {
		i -= len(m.CollapseKey)
		copy(dAtA[i:], m.CollapseKey)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.CollapseKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushBody_SilentPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody_SilentPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SilentPush != nil {
		{
			size, err := m.SilentPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PushBody_AlertingPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody_AlertingPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlertingPush != nil {
		{
			size, err := m.AlertingPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PushBody_VoipPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody_VoipPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoipPush != nil {
		{
			size, err := m.VoipPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PushBody_EncryptedPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody_EncryptedPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EncryptedPush != nil {
		{
			size, err := m.EncryptedPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PushBody_ReadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBody_ReadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReadPush != nil {
		{
			size, err := m.ReadPush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DeviceIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintPushService(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Push) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Push) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Push) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintPushService(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Destinations) > 0 {
		for k := range m.Destinations {
			v := m.Destinations[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPushService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPushService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPushService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectInvalidations) > 0 {
		for k := range m.ProjectInvalidations {
			v := m.ProjectInvalidations[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPushService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPushService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPushService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PongResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PongResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PongResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPushService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPushService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SilentPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Localizeable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocKey)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if len(m.LocArgs) > 0 {
		for _, s := range m.LocArgs {
			l = len(s)
			n += 1 + l + sovPushService(uint64(l))
		}
	}
	return n
}

func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPushService(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPushService(uint64(m.Id))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *OutPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPushService(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPushService(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPushService(uint64(m.AccessHash))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *MergeCallModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Merge {
		n += 2
	}
	return n
}

func (m *AlertingPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertBody != nil {
		n += m.AlertBody.Size()
	}
	if m.AlertTitle != nil {
		n += m.AlertTitle.Size()
	}
	if m.Badge != 0 {
		n += 1 + sovPushService(uint64(m.Badge))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *AlertingPush_LocAlertBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocAlertBody != nil {
		l = m.LocAlertBody.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *AlertingPush_SimpleAlertBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SimpleAlertBody)
	n += 1 + l + sovPushService(uint64(l))
	return n
}
func (m *AlertingPush_LocAlertTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocAlertTitle != nil {
		l = m.LocAlertTitle.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *AlertingPush_SimpleAlertTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SimpleAlertTitle)
	n += 1 + l + sovPushService(uint64(l))
	return n
}
func (m *VoipPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovPushService(uint64(m.CallId))
	}
	if m.AttemptIndex != 0 {
		n += 1 + sovPushService(uint64(m.AttemptIndex))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.EventBusId)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.UpdateType)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.DisposalReason)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.OutPeer != nil {
		l = m.OutPeer.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Video {
		n += 2
	}
	l = len(m.CallIdStr)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Merge != nil {
		l = m.Merge.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *EncryptedPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicAlertingPush != nil {
		l = m.PublicAlertingPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovPushService(uint64(m.Nonce))
	}
	return n
}

func (m *ReadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.LastReadDate != 0 {
		n += 1 + sovPushService(uint64(m.LastReadDate))
	}
	return n
}

func (m *PushBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollapseKey)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	if m.TimeToLive != 0 {
		n += 1 + sovPushService(uint64(m.TimeToLive))
	}
	if m.Seq != 0 {
		n += 1 + sovPushService(uint64(m.Seq))
	}
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *PushBody_SilentPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SilentPush != nil {
		l = m.SilentPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_AlertingPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertingPush != nil {
		l = m.AlertingPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_VoipPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoipPush != nil {
		l = m.VoipPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_EncryptedPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptedPush != nil {
		l = m.EncryptedPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *PushBody_ReadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadPush != nil {
		l = m.ReadPush.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}
func (m *DeviceIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovPushService(uint64(l))
		}
	}
	return n
}

func (m *Push) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Destinations) > 0 {
		for k, v := range m.Destinations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPushService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPushService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPushService(uint64(mapEntrySize))
		}
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovPushService(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovPushService(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProjectInvalidations) > 0 {
		for k, v := range m.ProjectInvalidations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPushService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPushService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPushService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PongResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPushService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPushService(x uint64) (n int) {
	return sovPushService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SilentPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SilentPush{`,
		`}`,
	}, "")
	return s
}
func (this *Localizeable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Localizeable{`,
		`LocKey:` + fmt.Sprintf("%v", this.LocKey) + `,`,
		`LocArgs:` + fmt.Sprintf("%v", this.LocArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`StrId:` + fmt.Sprintf("%v", this.StrId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutPeer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`StrId:` + fmt.Sprintf("%v", this.StrId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MergeCallModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MergeCallModel{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Merge:` + fmt.Sprintf("%v", this.Merge) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush{`,
		`AlertBody:` + fmt.Sprintf("%v", this.AlertBody) + `,`,
		`AlertTitle:` + fmt.Sprintf("%v", this.AlertTitle) + `,`,
		`Badge:` + fmt.Sprintf("%v", this.Badge) + `,`,
		`Peer:` + strings.Replace(this.Peer.String(), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "StringValue", "types.StringValue", 1) + `,`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_LocAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_LocAlertBody{`,
		`LocAlertBody:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertBody), "Localizeable", "Localizeable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_SimpleAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_SimpleAlertBody{`,
		`SimpleAlertBody:` + fmt.Sprintf("%v", this.SimpleAlertBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_LocAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_LocAlertTitle{`,
		`LocAlertTitle:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertTitle), "Localizeable", "Localizeable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertingPush_SimpleAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertingPush_SimpleAlertTitle{`,
		`SimpleAlertTitle:` + fmt.Sprintf("%v", this.SimpleAlertTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoipPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoipPush{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`AttemptIndex:` + fmt.Sprintf("%v", this.AttemptIndex) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`EventBusId:` + fmt.Sprintf("%v", this.EventBusId) + `,`,
		`Peer:` + strings.Replace(this.Peer.String(), "Peer", "Peer", 1) + `,`,
		`UpdateType:` + fmt.Sprintf("%v", this.UpdateType) + `,`,
		`DisposalReason:` + fmt.Sprintf("%v", this.DisposalReason) + `,`,
		`OutPeer:` + strings.Replace(this.OutPeer.String(), "OutPeer", "OutPeer", 1) + `,`,
		`Video:` + fmt.Sprintf("%v", this.Video) + `,`,
		`CallIdStr:` + fmt.Sprintf("%v", this.CallIdStr) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Merge:` + strings.Replace(this.Merge.String(), "MergeCallModel", "MergeCallModel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPush{`,
		`PublicAlertingPush:` + strings.Replace(this.PublicAlertingPush.String(), "AlertingPush", "AlertingPush", 1) + `,`,
		`EncryptedData:` + fmt.Sprintf("%v", this.EncryptedData) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadPush{`,
		`Peer:` + strings.Replace(this.Peer.String(), "Peer", "Peer", 1) + `,`,
		`LastReadDate:` + fmt.Sprintf("%v", this.LastReadDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody{`,
		`CollapseKey:` + fmt.Sprintf("%v", this.CollapseKey) + `,`,
		`TimeToLive:` + fmt.Sprintf("%v", this.TimeToLive) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_SilentPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_SilentPush{`,
		`SilentPush:` + strings.Replace(fmt.Sprintf("%v", this.SilentPush), "SilentPush", "SilentPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_AlertingPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_AlertingPush{`,
		`AlertingPush:` + strings.Replace(fmt.Sprintf("%v", this.AlertingPush), "AlertingPush", "AlertingPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_VoipPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_VoipPush{`,
		`VoipPush:` + strings.Replace(fmt.Sprintf("%v", this.VoipPush), "VoipPush", "VoipPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_EncryptedPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_EncryptedPush{`,
		`EncryptedPush:` + strings.Replace(fmt.Sprintf("%v", this.EncryptedPush), "EncryptedPush", "EncryptedPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBody_ReadPush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBody_ReadPush{`,
		`ReadPush:` + strings.Replace(fmt.Sprintf("%v", this.ReadPush), "ReadPush", "ReadPush", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceIdList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceIdList{`,
		`DeviceIds:` + fmt.Sprintf("%v", this.DeviceIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Push) String() string {
	if this == nil {
		return "nil"
	}
	keysForDestinations := make([]string, 0, len(this.Destinations))
	for k, _ := range this.Destinations {
		keysForDestinations = append(keysForDestinations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDestinations)
	mapStringForDestinations := "map[string]*DeviceIdList{"
	for _, k := range keysForDestinations {
		mapStringForDestinations += fmt.Sprintf("%v: %v,", k, this.Destinations[k])
	}
	mapStringForDestinations += "}"
	s := strings.Join([]string{`&Push{`,
		`Destinations:` + mapStringForDestinations + `,`,
		`Body:` + strings.Replace(this.Body.String(), "PushBody", "PushBody", 1) + `,`,
		`CorrelationId:` + fmt.Sprintf("%v", this.CorrelationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	keysForProjectInvalidations := make([]string, 0, len(this.ProjectInvalidations))
	for k, _ := range this.ProjectInvalidations {
		keysForProjectInvalidations = append(keysForProjectInvalidations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProjectInvalidations)
	mapStringForProjectInvalidations := "map[string]*DeviceIdList{"
	for _, k := range keysForProjectInvalidations {
		mapStringForProjectInvalidations += fmt.Sprintf("%v: %v,", k, this.ProjectInvalidations[k])
	}
	mapStringForProjectInvalidations += "}"
	s := strings.Join([]string{`&Response{`,
		`ProjectInvalidations:` + mapStringForProjectInvalidations + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PongResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PongResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPushService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SilentPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SilentPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SilentPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Localizeable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Localizeable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Localizeable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocArgs = append(m.LocArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeCallModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeCallModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeCallModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Merge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertingPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertingPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertingPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Localizeable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertBody = &AlertingPush_LocAlertBody{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertBody = &AlertingPush_SimpleAlertBody{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Localizeable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertTitle = &AlertingPush_LocAlertTitle{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertTitle = &AlertingPush_SimpleAlertTitle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			m.Badge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Badge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &types.StringValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &types.StringValue{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoipPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoipPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoipPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			m.AttemptIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventBusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisposalReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisposalReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutPeer == nil {
				m.OutPeer = &OutPeer{}
			}
			if err := m.OutPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Merge == nil {
				m.Merge = &MergeCallModel{}
			}
			if err := m.Merge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAlertingPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAlertingPush == nil {
				m.PublicAlertingPush = &AlertingPush{}
			}
			if err := m.PublicAlertingPush.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = append(m.EncryptedData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedData == nil {
				m.EncryptedData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReadDate", wireType)
			}
			m.LastReadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReadDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToLive", wireType)
			}
			m.TimeToLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToLive |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilentPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SilentPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_SilentPush{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertingPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlertingPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_AlertingPush{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoipPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoipPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_VoipPush{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EncryptedPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_EncryptedPush{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReadPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &PushBody_ReadPush{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Push) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destinations == nil {
				m.Destinations = make(map[string]*DeviceIdList)
			}
			var mapkey string
			var mapvalue *DeviceIdList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPushService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPushService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPushService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPushService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DeviceIdList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPushService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPushService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Destinations[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &PushBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInvalidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectInvalidations == nil {
				m.ProjectInvalidations = make(map[string]*DeviceIdList)
			}
			var mapkey string
			var mapvalue *DeviceIdList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPushService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPushService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPushService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPushService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DeviceIdList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPushService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPushService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ProjectInvalidations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PongResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PongResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PongResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPushService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPushService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPushService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPushService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPushService = fmt.Errorf("proto: unexpected end of group")
)
